version: "3.9"

services:
  postgres:
    image: ${POSTGRES_IMAGE:-ankane/pgvector:pg16}
    container_name: ${COMPOSE_PROJECT_NAME:-app_stack}_postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app_user} -d ${POSTGRES_DB:-app_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: ${REDIS_IMAGE:-redis:7-alpine}
    container_name: ${COMPOSE_PROJECT_NAME:-app_stack}_redis
    restart: unless-stopped
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: ${ELASTICSEARCH_IMAGE:-docker.elastic.co/elasticsearch/elasticsearch:8.11.0}
    container_name: ${COMPOSE_PROJECT_NAME:-app_stack}_elasticsearch
    restart: unless-stopped
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: ${ELASTICSEARCH_JAVA_OPTS:--Xms1g -Xmx1g}
      xpack.security.enabled: "false"
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
      - "${ELASTICSEARCH_TRANSPORT_PORT:-9300}:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - ./docker/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:9200 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10

  milvus:
    image: ${MILVUS_IMAGE:-milvusdb/milvus:v2.3.9}
    container_name: ${COMPOSE_PROJECT_NAME:-app_stack}_milvus
    restart: unless-stopped
    environment:
      MILVUS_DEPLOY_MODE: standalone
    command: ["milvus", "run", "standalone"]
    ports:
      - "${MILVUS_PORT:-19530}:19530"
    volumes:
      - milvus-data:/var/lib/milvus
      - ./docker/milvus/config.yaml:/milvus/configs/milvus.yaml:ro
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:9091/healthz || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10

  backend:
    image: ${BACKEND_IMAGE:-ghcr.io/example/backend:latest}
    container_name: ${COMPOSE_PROJECT_NAME:-app_stack}_backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://app_user:app_password@postgres:5432/app_db}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      ELASTICSEARCH_URL: ${ELASTICSEARCH_URL:-http://elasticsearch:9200}
      MILVUS_URL: ${MILVUS_URL:-milvus://milvus:19530}
      BACKEND_LOG_LEVEL: ${BACKEND_LOG_LEVEL:-info}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      milvus:
        condition: service_healthy
      ocr-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail ${BACKEND_HEALTHCHECK_URL:-http://localhost:8000/ready} || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5

  worker:
    image: ${WORKER_IMAGE:-ghcr.io/example/worker:latest}
    container_name: ${COMPOSE_PROJECT_NAME:-app_stack}_worker
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://app_user:app_password@postgres:5432/app_db}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      ELASTICSEARCH_URL: ${ELASTICSEARCH_URL:-http://elasticsearch:9200}
      MILVUS_URL: ${MILVUS_URL:-milvus://milvus:19530}
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-1}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      milvus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "${WORKER_HEALTHCHECK_CMD:-true}"]
      interval: 30s
      timeout: 5s
      retries: 3

  ocr-service:
    image: ${OCR_SERVICE_IMAGE:-ghcr.io/example/ocr-service:latest}
    container_name: ${COMPOSE_PROJECT_NAME:-app_stack}_ocr_service
    restart: unless-stopped
    env_file:
      - .env
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
    ports:
      - "${OCR_SERVICE_PORT:-7000}:7000"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail ${OCR_SERVICE_HEALTHCHECK_URL:-http://localhost:7000/health} || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  frontend:
    image: ${FRONTEND_IMAGE:-ghcr.io/example/frontend:latest}
    container_name: ${COMPOSE_PROJECT_NAME:-app_stack}_frontend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://backend:8000}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail ${FRONTEND_HEALTHCHECK_URL:-http://localhost:3000/health} || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  postgres-data:
  redis-data:
  elasticsearch-data:
  milvus-data:
